% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_data.R
\name{gen_table_data}
\alias{gen_table_data}
\title{Generate variables in a table}
\usage{
gen_table_data(
  N = if (is.null(df)) 400 else NROW(df),
  recipe,
  df = NULL,
  df_keepcols = rep(TRUE, if (is.null(df)) 0 else ncol(df)),
  miss_recipe = NULL
)
}
\arguments{
\item{N}{numeric(1). Number of rows to generate. Defaults to 400, or the number of rows in \code{df} if provided.}

\item{recipe}{tibble. A recipe for generating variables into the dataset. see \code{Details}.}

\item{df}{data.frame/tibble. Existing partial data which new variables should be added to, or \code{NULL} (the default).}

\item{miss_recipe}{tibble. A recipe for generating missingness positions, or \code{NULL} (the default).}
}
\description{
Generate variables in a table
}
\details{
The \code{recipe} parameter should be a tibble made up of one or more rows which define variable recipes via the following
columns:
\describe{
\item{variables}{(list column as needed) names of variables generated by that row. No empty/length 0 entries allowed}
\item{dependencies}{(list column). Names of variables which must have already been populated for the the variables in this row to be synthesized}
\item{func}{(list column) A character value which can be used to look up a function, or the function object itself, which accepts n, .df, and ... and returns either an atomic vector of length \code{n}, or a data.frame/tibble with n rows}
\item{func_args}{(list column) a list of arguments which should be passed to \code{func} in addition to \code{n} and \code{.df}}
}

The algorithm for synthesizing the table from the recipe is as follows:
\enumerate{
\item{Columns of synthesized data are generated according to recipe rows which have no dependencies in the order they appear in the recipe tibble and appended to the dataset with names for the variables generated}
\item{Recipe rows containing dependencies are checked in the order they appear in the recipe table for whether their dependencies are met, and if so data is synthesized for the corresponding variables and added to the dataset. This step is repeated until all recipe rows have been resolved, or until a full pass through the unresolved recipe rows does not lead to any new data synthesis.}
\item{After all data synthesis is complete, columns are then reordered based on any columns of \code{df} first, followed by newly synthesized variables in the order the appear in the recipe table's \code{variables} column.}
}
}
\examples{
library(tibble)
dat <- cbind(model = row.names(mtcars), as_tibble(mtcars))
recipe <- tribble(~variables, ~dependencies, ~func, ~func_args,
        "id", no_deps, "seq_n", NULL,
        "specialid", "id", function(n, .df) paste0("special-", .df$id), NULL)

gen_table_data(10, recipe)

}
